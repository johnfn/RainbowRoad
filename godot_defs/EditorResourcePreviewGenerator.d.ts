
/**
 * Custom code to generate previews. Please check `file_dialog/thumbnail_size` in [EditorSettings] to find out the right size to do previews at.
 *
*/
declare class EditorResourcePreviewGenerator extends Reference {

  
/**
 * Custom code to generate previews. Please check `file_dialog/thumbnail_size` in [EditorSettings] to find out the right size to do previews at.
 *
*/
  "new"(): EditorResourcePreviewGenerator;
  static "new"(): EditorResourcePreviewGenerator;




/**
 * If this function returns `true`, the generator will call [method generate] or [method generate_from_path] for small previews as well.
 *
 * By default, it returns `false`.
 *
*/
can_generate_small_preview(): boolean;

/**
 * Generate a preview from a given resource with the specified size. This must always be implemented.
 *
 * Returning an empty texture is an OK way to fail and let another generator take care.
 *
 * Care must be taken because this function is always called from a thread (not the main thread).
 *
*/
generate(from: Resource, size: Vector2): Texture;

/**
 * Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call [method generate].
 *
 * Returning an empty texture is an OK way to fail and let another generator take care.
 *
 * Care must be taken because this function is always called from a thread (not the main thread).
 *
*/
generate_from_path(path: string, size: Vector2): Texture;

/**
 * If this function returns `true`, the generator will automatically generate the small previews from the normal preview texture generated by the methods [method generate] or [method generate_from_path].
 *
 * By default, it returns `false`.
 *
*/
generate_small_preview_automatically(): boolean;

/** Returns [code]true[/code] if your generator supports the resource of type [code]type[/code]. */
handles(type: string): boolean;

  connect<T extends SignalsOf<EditorResourcePreviewGenerator>, U extends Node>(signal: T, node: U, method: keyof U): number;





  
}
